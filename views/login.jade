extend layout
block content
  .login
    .top
      #logo_darwined
    .bottom
      form(name="login", action="")
        input(type="text", placeholder="USUARIO", required)
        input(type="password", placeholder="CONTRASEÃ‘A", required)
        submit(type="submit", value="ENTRAR")
  footer
    .left
    .right
      a(href="#", class="logoForis")
      .fraseEmpresa DESARROLLADO POR
      
  // background
  canvas(id="viewport", width="1920", height="920")
  
  script(id="fragment", type="x-shader/x-fragment")
    #ifdef GL_ES
    precision mediump float;
    #endif

    uniform float time;

    uniform vec2 resolution;

    float length2(vec2 p) { return dot(p, p); }

    float noise(vec2 p) { return fract(sin(fract(sin(p.x) * (323.13311)) + p.y) * 330.01011) }
    
    float worley(vec2 p) {
      float d = 1e30;
      for (int xo = -1; xo <= 1; ++xo) { for (int yo = -1; yo <= 1; ++yo) { vec2 tp = floor(p) + vec2(xo, yo); d = min(d, length2(p - tp - vec2(noise(tp)))); } }
      return 1.5*exp(-3.0*abs(2.*d - .8)); }
    
    float fworley(vec2 p) {
      return sqrt(sqrt(sqrt(
        .3 * worley(p*1.4 + 2.6 + time*.00002) * sqrt(worley(p * 35. + .2 + time * -0.0005)) * sqrt(sqrt(worley(p * +.2 + 10.3)))))); }
    
    void main() {
      vec2 uv = gl_FragCoord.xy / resolution.xy;
      float t = fworley(uv * resolution.xy / 1410.0);
      t *= exp(-length2(abs(1.*uv - .5)));
      gl_FragColor = vec4(t * vec3(0.4, 1.8*t, 1.7*t + pow(t, 1.6-t)), 1.0); }
  
  script(src="js/glsl.min.js", type="text/javascript")
  script(type='text/javascript').
    if (!Glsl.supported()) alert("WebGL is not supported.");

    var glsl = Glsl({
      canvas: document.getElementById("viewport"),
      fragment: document.getElementById("fragment").textContent,
      variables: {
        time: 0 // The time in ms
      },
      update: function (time) {
        this.set("time", time);
      }
    }).start();
      

  
  
        
      
      
          
